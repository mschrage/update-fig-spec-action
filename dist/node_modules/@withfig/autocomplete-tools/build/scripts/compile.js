"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runCompiler = void 0;
var esbuild_1 = require("esbuild");
var child_process_1 = require("child_process");
var chokidar_1 = __importDefault(require("chokidar"));
var commander_1 = require("commander");
var fast_glob_1 = __importDefault(require("fast-glob"));
var log_1 = __importStar(require("./log"));
// Folder names
var SOURCE_FOLDER_NAME = "src";
var DESTINATION_FOLDER_NAME = "build";
function execWithError(command, logNodeErrors) {
    if (logNodeErrors === void 0) { logNodeErrors = false; }
    (0, child_process_1.exec)(command, function (error, stdout, stderr) {
        if (logNodeErrors && error) {
            log_1.default.log("node error running \"".concat(command, "\": ").concat(error.message), log_1.Level.ERROR);
            return;
        }
        if (stderr) {
            log_1.default.log("shell error running \"".concat(command, "\": ").concat(stderr), log_1.Level.ERROR);
        }
    });
}
function invalidateCache() {
    execWithError("fig settings autocomplete.developerModeNPMInvalidateCache true");
}
/**
 * Transpiles all passed files and prints the progress
 * @param specs Array of filepaths
 */
function processFiles(files, isDev) {
    return __awaiter(this, void 0, void 0, function () {
        var fileName;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    fileName = files.length === 1 ? files[0] : "".concat(files.length, " specs");
                    return [4 /*yield*/, (0, esbuild_1.build)(__assign({ entryPoints: files, outdir: DESTINATION_FOLDER_NAME, bundle: true, format: "esm", minify: true }, (isDev && { sourcemap: "inline" }))).catch(function (e) { return log_1.default.log("Error building ".concat(fileName, ": ").concat(e.message), log_1.Level.ERROR); })];
                case 1:
                    _a.sent();
                    log_1.default.log("Built ".concat(fileName));
                    invalidateCache();
                    return [2 /*return*/];
            }
        });
    });
}
function runCompiler(options) {
    return __awaiter(this, void 0, void 0, function () {
        var SOURCE_FILE_GLOB, files, watcher;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    SOURCE_FILE_GLOB = "".concat(SOURCE_FOLDER_NAME, "/**/*.ts");
                    return [4 /*yield*/, (0, fast_glob_1.default)(SOURCE_FILE_GLOB)];
                case 1:
                    files = _a.sent();
                    return [4 /*yield*/, processFiles(files)];
                case 2:
                    _a.sent();
                    if (options.watch) {
                        watcher = chokidar_1.default.watch(SOURCE_FILE_GLOB, { ignoreInitial: true });
                        // Process the changed file
                        watcher.on("change", function (file) { return processFiles([file], true); });
                        watcher.on("add", function (file) { return processFiles([file], true); });
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.runCompiler = runCompiler;
var program = new commander_1.Command("compile")
    .description("compile specs in the current directory")
    .option("-w, --watch", "Watch files and re-compile on change")
    .action(runCompiler);
exports.default = program;
