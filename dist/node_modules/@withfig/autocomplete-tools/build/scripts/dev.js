"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var os_1 = __importDefault(require("os"));
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var chalk_1 = __importDefault(require("chalk"));
var commander_1 = require("commander");
var child_process_1 = require("child_process");
var compile_1 = require("./compile");
var AUTOCOMPLETE_LOG_FILE = path_1.default.join(os_1.default.homedir(), ".fig", "logs", "specs.log");
function commandStatus(cmd) {
    try {
        (0, child_process_1.execSync)(cmd);
        return true;
    }
    catch (_a) {
        return false;
    }
}
function disableDevMode() {
    console.log("\n\nFig dev mode disabled\n");
    commandStatus("fig settings autocomplete.developerModeNPM false");
    commandStatus("fig settings autocomplete.developerModeNPMInvalidateCache false");
    process.exit(0);
}
function cleanup() {
    disableDevMode();
    fs_1.default.unwatchFile(AUTOCOMPLETE_LOG_FILE);
}
function runProgram() {
    return __awaiter(this, void 0, void 0, function () {
        var isMacOS, globalFigAppPath, localFigAppPath, previousLogContent_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    console.clear();
                    isMacOS = os_1.default.type() === "Darwin";
                    if (isMacOS) {
                        globalFigAppPath = path_1.default.join("/", "Applications", "Fig.app");
                        localFigAppPath = path_1.default.join(os_1.default.homedir(), "Applications", "Fig.app");
                        if (!fs_1.default.existsSync(globalFigAppPath) && !fs_1.default.existsSync(localFigAppPath)) {
                            console.log("\n******\n\n", chalk_1.default.bold(chalk_1.default.yellow(" WARNING: Fig App is not installed")), "\n\n", chalk_1.default.bold(chalk_1.default.cyan(" Download Fig at:")), "\n https://fig.io/", "\n\n******\n");
                        }
                        else if (!commandStatus("fig --version")) {
                            console.log("\n******\n\n", chalk_1.default.bold(chalk_1.default.yellow(" WARNING: Fig Cli is not installed")), "\n\n", chalk_1.default.bold(chalk_1.default.cyan(" 1. Run the install and update script ( â—§ > Integrations > Developer > Run install and update script)")), "\n", chalk_1.default.bold(chalk_1.default.cyan(" 2. Create a new terminal session")), "\n\n******\n");
                        }
                    }
                    else {
                        console.log("\n******\n\n", chalk_1.default.bold(chalk_1.default.red(" WARNING: Looks like you're not on macOS. We're working on linux / windows builds!")), "\n\n", chalk_1.default.bold(chalk_1.default.yellow(" You can still build and contribute to completion specs, but you won't be able to test them unless you are on a mac or a macosVM")), "\n\n******\n");
                    }
                    console.log("Welcome to ".concat(chalk_1.default.magenta("Fig Dev Mode"), "\n\n"), "1. Edit your spec(s) in the ".concat(chalk_1.default.bold("src/"), " directory\n"), "2. On save, they will compile to the local ".concat(chalk_1.default.bold("build/"), " directory\n"), "3. Test your changes ".concat(chalk_1.default.bold("instantly"), " in your terminal\n"), "4. When done, hit ".concat(chalk_1.default.bold("ctrl + c"), " to exit\n"));
                    if (!isMacOS) return [3 /*break*/, 2];
                    // We are on macos and the fig script exists
                    process.addListener("SIGTERM", cleanup);
                    process.addListener("SIGINT", cleanup);
                    process.addListener("SIGQUIT", cleanup);
                    commandStatus("fig settings autocomplete.developerModeNPM true");
                    commandStatus("fig settings autocomplete.devCompletionsFolder ".concat(path_1.default.join(process.cwd(), "build")));
                    fs_1.default.writeFileSync(AUTOCOMPLETE_LOG_FILE, "", { encoding: "utf8" });
                    previousLogContent_1 = "";
                    fs_1.default.watch(AUTOCOMPLETE_LOG_FILE, function (event) {
                        if (event === "change") {
                            var currentContent = fs_1.default.readFileSync(AUTOCOMPLETE_LOG_FILE, { encoding: "utf8" }).trim();
                            var message = previousLogContent_1
                                ? currentContent.split("\n").slice(previousLogContent_1.split("\n").length).join("\n")
                                : currentContent;
                            console.log(chalk_1.default.yellow(message));
                            previousLogContent_1 = currentContent;
                        }
                    });
                    return [4 /*yield*/, (0, compile_1.runCompiler)({ watch: true })];
                case 1:
                    _a.sent();
                    _a.label = 2;
                case 2: return [2 /*return*/];
            }
        });
    });
}
var program = new commander_1.Command("dev")
    .description("watch for changes and compile specs")
    .action(runProgram);
exports.default = program;
