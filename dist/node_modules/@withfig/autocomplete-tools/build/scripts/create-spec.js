"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var commander_1 = require("commander");
var fs_1 = __importDefault(require("fs"));
var readline_1 = __importDefault(require("readline"));
var path_1 = __importDefault(require("path"));
var chalk_1 = __importDefault(require("chalk"));
var fileContent = function (name) { return "const completionSpec: Fig.Spec = {\n  name: \"".concat(name, "\",\n  description: \"\",\n  subcommands: [{\n    name: \"my_subcommand\",\n    description: \"Example subcommand\",\n    subcommands: [{\n      name: \"my_nested_subcommand\",\n      description: \"Nested subcommand, example usage: '").concat(name, " my_subcommand my_nested_subcommand'\"\n    }],\n  }],\n  options: [{\n    name: [\"--help\", \"-h\"],\n    description: \"Show help for ").concat(name, "\",\n  }],\n  // Only uncomment if ").concat(name, " takes an argument\n  // args: {}\n};\nexport default completionSpec;"); };
function createSpec(cliName) {
    var filePath = path_1.default.join(process.cwd(), "src", "".concat(cliName, ".ts"));
    var baseName = path_1.default.basename(filePath, ".ts");
    var dirName = path_1.default.dirname(filePath);
    if (fs_1.default.existsSync(filePath)) {
        console.log("\n", chalk_1.default.red("This completion spec already exists"), "\n\n", chalk_1.default.bold("Start editing it from the src/".concat(baseName, ".ts now!")), "\n");
    }
    else {
        fs_1.default.mkdirSync(dirName, { recursive: true });
        fs_1.default.writeFileSync(filePath, fileContent(baseName));
        console.log("\n", chalk_1.default.green("Successfully created the new Spec ".concat(baseName)), "\n\n", "Start editing it at ".concat(chalk_1.default.bold("src/".concat(baseName, ".ts")), "!"), "\n");
    }
}
function runProgram(cliName) {
    var _this = this;
    if (!cliName) {
        var rInterface_1 = readline_1.default.createInterface({
            input: process.stdin,
            output: process.stdout,
        });
        rInterface_1.question("What's the name of the CLI tool you want to create an autocomplete spec for: ", function (answer) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                createSpec(answer);
                rInterface_1.close();
                return [2 /*return*/];
            });
        }); });
    }
    else {
        createSpec(cliName);
    }
}
var program = new commander_1.Command("create-spec")
    .description("create spec with given name")
    .arguments("[name]")
    .action(runProgram);
exports.default = program;
