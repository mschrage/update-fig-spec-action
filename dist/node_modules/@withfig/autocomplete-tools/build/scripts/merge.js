"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(require("fs"));
var commander_1 = require("commander");
var merge_1 = __importDefault(require("../merge"));
var presets_1 = require("../merge/presets");
function runProgram(oldSpecPath, newSpecPath, options) {
    var _a = options.ignoreProps, ignoreProps = _a === void 0 ? [] : _a, _b = options.ignoreCommandProps, ignoreCommandProps = _b === void 0 ? [] : _b, _c = options.ignoreOptionProps, ignoreOptionProps = _c === void 0 ? [] : _c, _d = options.ignoreArgProps, ignoreArgProps = _d === void 0 ? [] : _d, updatedSpecPath = options.newFile, preset = options.preset;
    var output = (0, merge_1.default)(fs_1.default.readFileSync(oldSpecPath, { encoding: "utf8" }), fs_1.default.readFileSync(newSpecPath, { encoding: "utf8" }), {
        preset: preset,
        ignore: {
            commonProps: ignoreProps,
            commandProps: ignoreCommandProps,
            optionProps: ignoreOptionProps,
            argProps: ignoreArgProps,
        },
    });
    fs_1.default.writeFileSync(updatedSpecPath || oldSpecPath, output);
}
var program = new commander_1.Command("merge")
    .arguments("<oldspec> <newspec>")
    .description("deep merge new spec into old spec")
    .option("-n, --new-file <path>", "Create a new spec file instead of updating the old one")
    .option("-i, --ignore-props <props>", "The props that should always be overridden.", function (value) {
    return value.split(",");
})
    .option("--ignore-command-props <props>", "The command props that should always be overridden.", function (value) { return value.split(","); })
    .option("--ignore-option-props <props>", "The option props that should always be overridden.", function (value) { return value.split(","); })
    .option("--ignore-arg-props <props>", "The arg props that should always be overridden.", function (value) { return value.split(","); });
var presetOption = new commander_1.Option("-p, --preset <name>", "Use a preset").choices(Object.keys(presets_1.presets));
program.addOption(presetOption);
program.action(runProgram);
exports.default = program;
